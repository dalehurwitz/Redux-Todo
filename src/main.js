/* global ReactRedux, Redux, ReactDOM */

// "Getting Started with Redux" (by Dan Abramov)
// https://egghead.io/series/getting-started-with-redux

// This file on JSBin (by Jesse Buchanan):
// http://jsbin.com/wuwezo/74/edit?js,console,output

////////////////////////////////////////////////
//
// Imports
//

import React from "react";
import ReactDOM from "react-dom";
import { Provider } from "react-redux";
import configureStore from "./configureStore";
import TodoApp from "./components/App";



////////////////////////////////////////////////
//
// react-redux container components generated by `connect`
//


// To create a container component, we use react-redux `connect`.
// We pass the mapStateToProps and mapDispatchToProps functions
// defined above.
//
// `connect` returns a curried function, which you call on the
// presentational component. *This* function returns a "connected"
// or "container" component.
//
// What is a connected component anyway?
//
// In the mapStateToProps function, we pluck any necessary state
// from the Redux store, and react-redux wires it to the React props.
//
// In the mapDispatchToProps function, we accept a callback to store.dispatch.
// We return an object, whose keys are callback attributes (`onClick` etc)
// and whose values are functions that actually perform dispatch.
//
// This allows us to take a stateless, dumb, presentation only component,
// and transform it into a component that knows how to get state from the store,
// and knows how to dispatch events to the store.
//
// The egghead redux video tutorials walk through how to implement `connect`
// by hand.



// Default behavior of `connect` (with 0 parameters):
//   Do not subscribe to any stores, inject `dispatch` as prop.
// This shorthand is equivalent to AddTodoHardWay, demonstrated below.


// AddTodoTheHardWay = connect(
//   state => {
//     // AddToDo doesn't have any state to be mapped to props.
//     // Could have just specified null here instead of an anon fn.
//     return {};
//   },
//   dispatch => {
//     // A bit hard to follow here.
//     // The 2nd arg of `connect` is the mapDispatchToProps fn.
//     // This function takes a dispatch function, returns callbacks as needed.
//     // In other cases, we might return onSomethingClick callbacks here, calling
//     //  store.dispatch inside those callbacks as necessary.
//     // In this case, we're just taking dispatch, and returning
//     //  {dispatch: dispatch}
//
//     return { dispatch };
//   }
// )(AddTodo);

////////////////////////////////////////////////
//
// Helpers (just a filter, really)
//



// react-redux <Provider> uses the React Context feature (`getChildContext`,
// `childContextTypes`) to inject the store, automatically subscribe and
// unsubscribe to it at the correct React lifecycle hooks (e.g. `componentDidMount`).
//
// See how <Provider> works here:
// https://github.com/rackt/react-redux/blob/master/src/components/Provider.js

const store = configureStore();

ReactDOM.render(
  <Provider store={store}>
    <TodoApp />
  </Provider>,
  document.getElementById('root')
);
